// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prototype.Data;

#nullable disable

namespace Prototype.Migrations
{
    [DbContext(typeof(SentinelContext))]
    [Migration("20250621091612_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prototype.Models.ApplicationConnectionModel", b =>
                {
                    b.Property<Guid>("ApplicationConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationDatabase")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("int");

                    b.Property<string>("AwsAccessKeyId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AwsSecretAccessKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AwsSessionToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("CanonicalizeHostName")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Instance")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Principal")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceRealm")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ApplicationConnectionId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationConnections");
                });

            modelBuilder.Entity("Prototype.Models.ApplicationLogModel", b =>
                {
                    b.Property<Guid>("ApplicationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationModelApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationLogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationModelApplicationId");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("Prototype.Models.ApplicationModel", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationDataSourceType")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Prototype.Models.AuditLogModel", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuditLogId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Prototype.Models.AuthenticationModel", b =>
                {
                    b.Property<Guid>("AuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Authentication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthenticationDatabase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwsAccessKeyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwsSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwsSessionToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CanonicalizeHostName")
                        .HasColumnType("bit");

                    b.Property<Guid>("DataSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Principal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceRealm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthenticationId");

                    b.HasIndex("DataSourceId")
                        .IsUnique();

                    b.ToTable("Authentications");
                });

            modelBuilder.Entity("Prototype.Models.DataSourceModel", b =>
                {
                    b.Property<Guid>("DataSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataSourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataSourceType")
                        .HasColumnType("int");

                    b.Property<string>("DatabaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataSourceId");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("Prototype.Models.HumanResourceModel", b =>
                {
                    b.Property<Guid>("HumanResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HumanResourceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("HumanResources");
                });

            modelBuilder.Entity("Prototype.Models.TemporaryUserModel", b =>
                {
                    b.Property<Guid>("TemporaryUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemporaryUserId");

                    b.ToTable("TemporaryUsers");
                });

            modelBuilder.Entity("Prototype.Models.UserActivityLogModel", b =>
                {
                    b.Property<Guid>("UserActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DeviceInformation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserActivityLogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityLogs");
                });

            modelBuilder.Entity("Prototype.Models.UserApplicationModel", b =>
                {
                    b.Property<Guid>("UserApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationConnectionModelApplicationConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationModelApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserModelUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserApplicationId");

                    b.HasIndex("ApplicationConnectionId");

                    b.HasIndex("ApplicationConnectionModelApplicationConnectionId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationModelApplicationId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModelUserId");

                    b.ToTable("UserApplications");
                });

            modelBuilder.Entity("Prototype.Models.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prototype.Models.UserRecoveryRequestModel", b =>
                {
                    b.Property<Guid>("UserRecoveryRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RecoveryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserRecoveryRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRecoveryRequests");
                });

            modelBuilder.Entity("Prototype.Models.UserRoleModel", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Prototype.Models.ApplicationConnectionModel", b =>
                {
                    b.HasOne("Prototype.Models.ApplicationModel", "Application")
                        .WithMany("Connections")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Prototype.Models.ApplicationLogModel", b =>
                {
                    b.HasOne("Prototype.Models.ApplicationModel", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prototype.Models.ApplicationModel", null)
                        .WithMany("ApplicationLogs")
                        .HasForeignKey("ApplicationModelApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Prototype.Models.AuditLogModel", b =>
                {
                    b.HasOne("Prototype.Models.UserModel", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prototype.Models.AuthenticationModel", b =>
                {
                    b.HasOne("Prototype.Models.DataSourceModel", "DataSource")
                        .WithOne("Authentication")
                        .HasForeignKey("Prototype.Models.AuthenticationModel", "DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");
                });

            modelBuilder.Entity("Prototype.Models.HumanResourceModel", b =>
                {
                    b.HasOne("Prototype.Models.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("Prototype.Models.HumanResourceModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prototype.Models.UserActivityLogModel", b =>
                {
                    b.HasOne("Prototype.Models.UserModel", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prototype.Models.UserApplicationModel", b =>
                {
                    b.HasOne("Prototype.Models.ApplicationConnectionModel", "ApplicationConnection")
                        .WithMany()
                        .HasForeignKey("ApplicationConnectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prototype.Models.ApplicationConnectionModel", null)
                        .WithMany("UserApplications")
                        .HasForeignKey("ApplicationConnectionModelApplicationConnectionId");

                    b.HasOne("Prototype.Models.ApplicationModel", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prototype.Models.ApplicationModel", null)
                        .WithMany("UserApplications")
                        .HasForeignKey("ApplicationModelApplicationId");

                    b.HasOne("Prototype.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Prototype.Models.UserModel", null)
                        .WithMany("UserApplications")
                        .HasForeignKey("UserModelUserId");

                    b.Navigation("Application");

                    b.Navigation("ApplicationConnection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prototype.Models.UserRecoveryRequestModel", b =>
                {
                    b.HasOne("Prototype.Models.UserModel", "User")
                        .WithMany("RecoveryRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prototype.Models.ApplicationConnectionModel", b =>
                {
                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("Prototype.Models.ApplicationModel", b =>
                {
                    b.Navigation("ApplicationLogs");

                    b.Navigation("Connections");

                    b.Navigation("UserApplications");
                });

            modelBuilder.Entity("Prototype.Models.DataSourceModel", b =>
                {
                    b.Navigation("Authentication")
                        .IsRequired();
                });

            modelBuilder.Entity("Prototype.Models.UserModel", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("AuditLogs");

                    b.Navigation("RecoveryRequests");

                    b.Navigation("UserApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
